// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package server

import (
	"github.com/Mushus/trashbox/backend/server/adapter/database"
	"github.com/Mushus/trashbox/backend/server/adapter/fs"
	"github.com/Mushus/trashbox/backend/server/adapter/http"
	"github.com/Mushus/trashbox/backend/server/adapter/http/handler"
	"github.com/Mushus/trashbox/backend/server/adapter/http/middleware"
	"github.com/Mushus/trashbox/backend/server/adapter/http/renderer"
	"github.com/Mushus/trashbox/backend/server/adapter/http/template"
	"github.com/Mushus/trashbox/backend/server/adapter/http/validator"
	"github.com/Mushus/trashbox/backend/server/app"
	"github.com/Mushus/trashbox/backend/server/app/user"
)

// Injectors from wire.go:

func InitializeServer() (*Server, func(), error) {
	db, cleanup, err := database.ProvideDB()
	if err != nil {
		return nil, nil, err
	}
	repository := database.ProvideUserDatastore(db)
	service := user.ProvideService(repository)
	appApp := app.ProvideApp(service)
	session := handler.ProvideSession(appApp)
	documentRepository := database.ProvideDocumentDatastore(db)
	assetRepository := fs.ProvideAssetDatastore()
	handlerHandler := handler.ProvideHandler(documentRepository, assetRepository)
	handlers := handler.Handlers{
		Session: session,
		Handler: handlerHandler,
	}
	validatorValidator := validator.ProvideValidator()
	templateMap := template.ProvideTemplates()
	rendererRenderer := renderer.ProvideRenderer(templateMap)
	sessionMiddleware, err := middleware.NewSession()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	echo, err := http.ProvideRouter(handlers, validatorValidator, rendererRenderer, sessionMiddleware)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	server := ProvideServer(echo)
	return server, func() {
		cleanup()
	}, nil
}
