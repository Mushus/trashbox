// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package repository is a generated GoMock package.
package repository

import (
	asset "github.com/Mushus/trashbox/backend/server/app/asset"
	property "github.com/Mushus/trashbox/backend/server/app/property"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUser is a mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// FindByLogin mocks base method
func (m *MockUser) FindByLogin(login string) (*property.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLogin", login)
	ret0, _ := ret[0].(*property.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLogin indicates an expected call of FindByLogin
func (mr *MockUserMockRecorder) FindByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLogin", reflect.TypeOf((*MockUser)(nil).FindByLogin), login)
}

// Add mocks base method
func (m *MockUser) Add(user *property.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockUserMockRecorder) Add(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUser)(nil).Add), user)
}

// MockDocument is a mock of Document interface
type MockDocument struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentMockRecorder
}

// MockDocumentMockRecorder is the mock recorder for MockDocument
type MockDocumentMockRecorder struct {
	mock *MockDocument
}

// NewMockDocument creates a new mock instance
func NewMockDocument(ctrl *gomock.Controller) *MockDocument {
	mock := &MockDocument{ctrl: ctrl}
	mock.recorder = &MockDocumentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocument) EXPECT() *MockDocumentMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDocument) Get(id string) (*property.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*property.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDocumentMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDocument)(nil).Get), id)
}

// Put mocks base method
func (m *MockDocument) Put(doc property.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockDocumentMockRecorder) Put(doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDocument)(nil).Put), doc)
}

// MockAsset is a mock of Asset interface
type MockAsset struct {
	ctrl     *gomock.Controller
	recorder *MockAssetMockRecorder
}

// MockAssetMockRecorder is the mock recorder for MockAsset
type MockAssetMockRecorder struct {
	mock *MockAsset
}

// NewMockAsset creates a new mock instance
func NewMockAsset(ctrl *gomock.Controller) *MockAsset {
	mock := &MockAsset{ctrl: ctrl}
	mock.recorder = &MockAssetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAsset) EXPECT() *MockAssetMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockAsset) Get(id string) (*property.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*property.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAssetMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAsset)(nil).Get), id)
}

// Add mocks base method
func (m *MockAsset) Add(streamAsset property.Asset) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", streamAsset)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockAssetMockRecorder) Add(streamAsset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAsset)(nil).Add), streamAsset)
}

// Remove mocks base method
func (m *MockAsset) Remove(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockAssetMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockAsset)(nil).Remove), id)
}

// MockAssetCache is a mock of AssetCache interface
type MockAssetCache struct {
	ctrl     *gomock.Controller
	recorder *MockAssetCacheMockRecorder
}

// MockAssetCacheMockRecorder is the mock recorder for MockAssetCache
type MockAssetCacheMockRecorder struct {
	mock *MockAssetCache
}

// NewMockAssetCache creates a new mock instance
func NewMockAssetCache(ctrl *gomock.Controller) *MockAssetCache {
	mock := &MockAssetCache{ctrl: ctrl}
	mock.recorder = &MockAssetCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAssetCache) EXPECT() *MockAssetCacheMockRecorder {
	return m.recorder
}

// GetCache mocks base method
func (m *MockAssetCache) GetCache(id, format string) (asset.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", id, format)
	ret0, _ := ret[0].(asset.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache
func (mr *MockAssetCacheMockRecorder) GetCache(id, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockAssetCache)(nil).GetCache), id, format)
}

// PutCache mocks base method
func (m *MockAssetCache) PutCache(asset asset.Asset, format string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCache", asset, format)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCache indicates an expected call of PutCache
func (mr *MockAssetCacheMockRecorder) PutCache(asset, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCache", reflect.TypeOf((*MockAssetCache)(nil).PutCache), asset, format)
}

// PurgeAll mocks base method
func (m *MockAssetCache) PurgeAll(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeAll", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeAll indicates an expected call of PurgeAll
func (mr *MockAssetCacheMockRecorder) PurgeAll(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeAll", reflect.TypeOf((*MockAssetCache)(nil).PurgeAll), id)
}
