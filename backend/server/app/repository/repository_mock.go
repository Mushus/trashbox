// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package repository is a generated GoMock package.
package repository

import (
	asset "github.com/Mushus/trashbox/backend/server/app/asset"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAssetCache is a mock of AssetCache interface
type MockAssetCache struct {
	ctrl     *gomock.Controller
	recorder *MockAssetCacheMockRecorder
}

// MockAssetCacheMockRecorder is the mock recorder for MockAssetCache
type MockAssetCacheMockRecorder struct {
	mock *MockAssetCache
}

// NewMockAssetCache creates a new mock instance
func NewMockAssetCache(ctrl *gomock.Controller) *MockAssetCache {
	mock := &MockAssetCache{ctrl: ctrl}
	mock.recorder = &MockAssetCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAssetCache) EXPECT() *MockAssetCacheMockRecorder {
	return m.recorder
}

// GetCache mocks base method
func (m *MockAssetCache) GetCache(id, format string) (asset.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", id, format)
	ret0, _ := ret[0].(asset.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache
func (mr *MockAssetCacheMockRecorder) GetCache(id, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockAssetCache)(nil).GetCache), id, format)
}

// PutCache mocks base method
func (m *MockAssetCache) PutCache(asset asset.Asset, format string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCache", asset, format)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCache indicates an expected call of PutCache
func (mr *MockAssetCacheMockRecorder) PutCache(asset, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCache", reflect.TypeOf((*MockAssetCache)(nil).PutCache), asset, format)
}

// PurgeAll mocks base method
func (m *MockAssetCache) PurgeAll(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeAll", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeAll indicates an expected call of PurgeAll
func (mr *MockAssetCacheMockRecorder) PurgeAll(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeAll", reflect.TypeOf((*MockAssetCache)(nil).PurgeAll), id)
}
